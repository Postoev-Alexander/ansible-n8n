# Файл задач для роли node_exporter
- name: Проверить наличие Node Exporter
  ansible.builtin.stat:
    path: "{{ node_exporter_install_dir }}/node_exporter"
  register: node_exporter_bin_check

- name: Получить последнюю версию Node Exporter (если не указана)
  ansible.builtin.uri:
    url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
    method: GET
    return_content: yes
  register: github_releases
  when: node_exporter_version == "latest"
  delegate_to: localhost # Выполнять на управляющей машине Ansible
  run_once: true # Только один раз для всего плейбука

- name: Установить версию из последней доступной на GitHub
  ansible.builtin.set_fact:
    node_exporter_actual_version: "{{ github_releases.json.tag_name | regex_replace('^v', '') }}"
  when: node_exporter_version == "latest"

- name: Использовать указанную версию
  ansible.builtin.set_fact:
    node_exporter_actual_version: "{{ node_exporter_version }}"
  when: node_exporter_version != "latest"

- name: Скачать Node Exporter
  ansible.builtin.get_url:
    url: "{{ node_exporter_download_url_base }}/v{{ node_exporter_actual_version }}/node_exporter-{{ node_exporter_actual_version }}.linux-amd64.tar.gz"
    dest: "/tmp/node_exporter-{{ node_exporter_actual_version }}.tar.gz"
    mode: '0644'
  when: not node_exporter_bin_check.stat.exists # Скачиваем только если нет установленной версии

- name: Распаковать Node Exporter
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter-{{ node_exporter_actual_version }}.tar.gz"
    dest: "/tmp/"
    remote_src: yes
    creates: "/tmp/node_exporter-{{ node_exporter_actual_version }}.linux-amd64/node_exporter"
  when: not node_exporter_bin_check.stat.exists

- name: Создать системного пользователя для Node Exporter
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    system: yes
    shell: /bin/false
    create_home: no
  become: yes

- name: Переместить бинарный файл Node Exporter в место установки
  ansible.builtin.copy:
    src: "/tmp/node_exporter-{{ node_exporter_actual_version }}.linux-amd64/node_exporter"
    dest: "{{ node_exporter_install_dir }}/node_exporter"
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_user }}"
    mode: '0755'
    remote_src: yes
  become: yes
  notify: Перезапустить сервис Node Exporter

- name: Скопировать systemd юнит-файл для Node Exporter
  ansible.builtin.template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify: Перезапустить сервис Node Exporter

- name: Убедиться, что сервис Node Exporter запущен и включен при загрузке
  ansible.builtin.systemd:
    name: node_exporter
    state: started
    enabled: yes
    daemon_reload: yes # Перезагрузить конфигурацию systemd
  become: yes

# Опционально: Открыть порт в файрволе (если у вас UFW или firewalld)
#- name: Открыть порт Node Exporter в UFW (если UFW активен)
#  community.general.ufw:
#    rule: allow
#    port: "{{ node_exporter_port }}"
#    proto: tcp
#    comment: "Allow Node Exporter traffic"
#  become: yes
#  when: ansible_facts['service_facts']['ufw']['state'] == 'running' # Проверяем, запущен ли UFW